####### PRE-RENDERING IN NEXTJS

Pre-rendering means generation of HTML for each pages in advance instead of having it all done by client side javascript. In react by-default there is no pre-rendering which we can be determined by going to page source of react application which will always remain empty but in case of nextJS pre-rendering take place with the help of which page source will remain populated. 

####### APPLICATION INITIAL LOAD COMPARISON

In react initially html is empty with div element with id root and then when js is loaded in browser it will then mount the node element in html and populate the div element with id root , This process is called hydration. On the other hand in nextJS app the html is already rendered and populated with necessary data and dom element , The js is then loaded to make app interactive.

####### WHY PRE-RENDER 

1. Pre-rendering improves performance , In react we need to wait for js to be loaded in browser then the app is available to the user on the other hand with pre-rendering html is already there hence app loads faster. 

2. Pre-rendering result in better SEO , As in react page source code is empty so google crawlers will not find anything to help in indexing the react app but in case of nextJS with pre-rendering as html content is already there so it help web crawlers to index the app hence leading to better search ranking. 

####### TYPES OF PRE-RENDERING

1. Static Generation => It is a method where the HTML pages are generated at build time that is HTML with all the data required to make up the content of web pages are generated in advance when we build the application. It is the recommended method to pre-render pages whenever possible. Page can be built once , cached by a CDN and served to the client almost instantly hence leading to performance boost. This approach is suitable for pages that do not change frequently ex, Blog pages , marketing pages etc. When a user requests a page, the pre-rendered HTML is served, and subsequent requests for the same page will receive the same HTML until the next build. 

By default, Next.js uses Static Generation (SG) for pre-rendering. When you create a page in the pages directory, Next.js will statically generate the HTML at build time. This means that the HTML for each page is generated once during the build process, and the same pre-rendered HTML is served to all users until the next build.

Static Generation can be done with or without data which means with or without making request to external api , As there can be a case in which for some pages we already know the content but for some pages first need to get some data from database and then populate the page content.

SOME OF THE FEATURES OF STATIC GENERATION ::

(a). getStaticProps() runs only on server side that is why when we console log anything inside this function we see it on terminal rather than in console. It means it will never run in client side infact the code we run inside this function won't even be included in the js bundle that is sent to the browser 

(b). We can write server side code inside this function that is node js code like accessing file system using fs moudle and querying a database 

(c). The getStaticProps() is allowed only in a page and cannot be run in a regular component file. It is used only for pre-rendering and not for client side data fetching. Ex of use displaying list of blogs in blog website etc..

(d). The getStaticProps() should return an object and object must contain a props key which is also an object otherwise nextJS shows error 

(e). getStaticProps() runs at build time in production that is when we run command "npm run build" and this is why when we go to page source we see the fetched data is also available in HTML as content. In dev it runs on every request 

When we run "npm run build" command the terminal of nextJS gives us information about the project like the routes our application have , size of each route , size of file to be downloaded by user when visiting each route etc.. And to understand more watch code-evolution video "20 - Inspecting Static Generation Builds". 

@@@@@@ NOTE::  let say we have build the application by npm run build and run the npm run start command to run our build application in localhost. Let say our application consist of only 2 route , "/" and "/product". Now when we go to "/" route in network tag html file for "/" route , css , webpack , framework code and index.js file is downloaded and when we go to "/product" route then again html file for "/product" , css , webpack , framework code and product.js file is downloaded , It means only those file will be downloaded which user currently want in browser. Now let say in "/" route i have a link that allow me to navigate from "/" to "/product" route and now because of this link when i go to "/" route the network tab will again download all file required by "/" but will also download product.js file of "/product" route as its link is present in "/" route. The advantage of this behaviour is by this now when we go to "/product" route the ui will load fast because .js file is already downloaded. To understand more watch viedo "21 - Running Static Generation Builds"

Now most of the time in app we create "MASTER DETAIL PATTERN" in which we have a master page which shows list of the item and details page which show information of selected item from master page. Now let say we want to create app in which we have "/posts" which shows list of posts and "/posts/postId" which shows information of selected post but we want both these routes to be pre-rendered but this time we have different approach as we have a dynamic postId parameter to consider. 

Here when we run npm run build for application which contain pre-rendering of dynamic route JSON data as well in this case build will also contain seprate html file each based on value of that dynamic parameter. To understand more watch video "24 - Inspecting getStaticPaths Builds"

#### ISSUES WITH STATIC SITE GENERATION ::

The problem with SSG approach of pre-rendering is the build time is proportional to no of pages in the application so if let say app have 1 lack pages so it can take around 2 hours for the build to complete so in directly greater the build time more will be the cost implication of app. A page once generated will contain the stale or same data as long as we re-build the app. Let say we have ecommerce app in which products detail is changing frequently in backend , So in this case if we are using SSG in order to reflect the changed data in frontend we have to re-build app again and again which in turn takes a lot of time. We might think that we can use getStaticPaths to pre-render pages some pages at begining and rest can be generated at request on demand , But getStaticPaths works only for dynamic route pages and even if our app mostly consist of dynamic route still problem of stale data will come in which if we have pre-rendered some pages at build time and rest is generated at request on demand then if we changed the backend data it will not update or again pre-render the pages which are already generated. To address these issues we use ISG

2. Incremental Static Generation => It is a feature in Next.js that allows you to update static content at runtime without having to rebuild the entire site. ISG enables you to generate new static pages on-demand as users request them


## ISSUES WITH STATIC GENERATON AND ISG ::

We cannot fetch data at request time that is gnerating page with data not in build time but only when making request. With not being able to fetch data per request we will run into the problem of stale data. Let say we are building a news website in which content is very dynamic in the sense that new articles can be published almost every second , getStaticProps will fetch the news at build time which is not suitable at all , getStaticPaths will help fetch data on initial request but it is then cached for subsequent requests , ISG can help but if revalidate is 1 second we still might not always see the most up to data news when regeneration is happening in the background , If your intention is to revalidate data in less than a second then using ISG is not good rather fetch the data on client side by making get request on the component but then no SEO.

Other problem is we dont get access to the incoming request when page pre-rendered at build time and it is a problem when data that need to be fetched is specific to the user and some value passed to request like userID etc. Let say we are building website similar to twitter , As a user i want to see only those twits which i have done and only of my friend twits so data is specific to me , But at the same time data is needed to be SEO friendly. We can actually get data in client side from useEffect but then we will miss out the SEO. To address these issues we use SERVER SIDE RENDERING

3. Server Side Rendering => SSR allow us to pre-render page not in build time but at request time and HTML will be generated for each request.  SSR is beneficial when you have content that changes frequently and needs to be personalized for each request by keeping in mind of SEO. Here behind the Scene when we build our app which consist of SSR page like "/news" and "/news/categoryId" nextJS will not pre-render these pages statically at build time but rather generate it on server when request for these pages is made by user. So when we have build our app then HTML for SSR pages will not be present in build folder only .js file will be there , When we visit any SSR page then first by SSR page will be generated at request time and then send to browser but it does not means once generated it is cached in build folder but every time we made request to SSR page it will always be generated at request time and will not ba cached. 