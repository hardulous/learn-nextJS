########## MISCELLENOUS TOPIC IN NEXTJS

1. APP LAYOUT

When building app it is common to have a defined layout for each page in app for ex , Header at the top and footer at the bottom which will remain same for all page and only middle part of app will change. In nextjs the recommended way to define layout for app is by _app.js. 

The _app.js return a component that receive props :: 

(a). Component => This is a prop passed to _app.js by Next.js. It represents the current page component that needs to be rendered.

(b). pageProps => Also a prop passed to _app.js by Next.js. It contains the initial props that will be passed to the page component. These props can include data fetched on the server side (using getInitialProps or getServerSideProps) or other initial props needed for the page.

When you use <Component {...pageProps} />, you are essentially rendering the current page component (Component) and passing in its initial props (pageProps). This way, you ensure that the page component receives the necessary data and properties when it's rendered. if you omit <Component {...pageProps} /> from the _app.js file, your pages won't be rendered, and the application won't work as expected. 

Now to change layout of whole app just add the necessary JSX code that you want to be consistent in your app in _app.js and in this way that JSX will remain same for all pages. We might have some exceptions in which layout should be different compare to whole app like signup and signin page in which we dont want to have same layout in this case to define a different layout for specifc page we can use "getLayout" function of page component and this function would be responsible for returning the layout component for that specific page.


2. HEAD COMPONENT

It is a special component that allows you to modify the head of the HTML document dynamically. The head of a document typically includes meta tags, title, styles, scripts, and other elements that provide metadata about the document and this info is very important for SEO purpose. By default nextJS include few meta tags for every page and by using Head component we can add and override the metdadata of the page. Offcourse specifying head tag for every page might be troublesome so we can define only one in _app.js and and same will be used for all those pages that does not specify the Head component. It is possible to bind dynamic value to this Head tag either by getStaticProps or getServerSideProps since it is a JSX and pre-rendered page will do contain that head tag info   


3. IMAGE COMPONENT

It is a specialized component designed for optimizing and serving images in your applications. It provides several benefits, including image optimization, lazy loading, skeleton while loading, and support for different image formats.


4. ABSOLUTE IMPORTS & MODULE PATHS 

It refers to a way of importing modules or files using an absolute path that starts from either the project's root directory or from any specific directory mentioned. This is in contrast to relative imports, which specify the path relative to the current file's location. We can create module path aliases which then can be used for absolute import using jsconfig.json file which contain "paths" property , Inside it we can pass key value pair where key denotes aliases and value denote path of directory but here must specify baseUrl as "."  

5. STATIC HTML EXPORT 

Till now we have build command in nextJS to build the application for production in .next folder and start command to start the node.js server that supports hybrid pages , serving both statically generated and server side rendered pages. But there exists another command called "next export" that will exports all your pages to static HTML files that we can serve without the need of node.js server this allow us to host our app on any static hosting server or CDN without need to maintain a server. But it comes with limitation that we can not export pages that use ISR and SSR for pre-rendering but simple SSG pages can be exported. But to run export command first run build command 