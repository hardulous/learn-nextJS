####### ROUTING IN NEXTJS

In nextjs there is file-based routing mechanism which means we have to follow some syntax , conventions in order to use the routing feature provided by nextjs. Some of the conventions are ::

1. When any .js file which exports a component is added to the pages folder it automatically available as a route

2. By mixing and matching file names with a nested folder structure , It is possible to pretty much define the most common routing patterns 

(a). Now let say we are creating an application and our domain is "localhost:3000" , In which we have home page route "/" so in order to create home page we will create index.js file in pages folder and this index.js file will map to root of our domain that is '/'. Now if we want to add 2 more route "/about" or "/profile" we will create about.js and profile.js file in pages folder as name of the file in pages folder will correspond to the route in address bar.

(b). Now let say we have to create a blog page "/blog" and inside it we have 2 nested route "/blog/first" and "/blog/second" , So for this as we need nested route so for nested route we have to create nested folder in pages folder. So we will create blog folder and inside it we will create index.js file which will correspond to root of "/blog" route and as we want other 2 route so for that we will create first.js and second.js which will correspond to "/blog/first" and "/blog/second" 

@@@@ NOTE ::: In Next.js, when defining a page components (component which is first to be loaded when user hit a particular route) in the pages directory, it's recommended to use a default export for the page components instead of named export. This is because Next.js uses dynamic imports and server-side rendering, and default exports work more seamlessly with these features. One more thing even if we are creating routes in different file but in nextJs all those route file are automatically lazy loaded when we hit in browser that is the particular route file will be loaded in browser only when user hit the url that correspond to that route file

(c). Now let say we product pages "/product" in which based on id of the product we will display the product details page "/product/1" , "/product/2" .. etc to the user but as that id can be anything we dont know so we will create dynamic route. To create dynamic route the sytax is "[productId].js" inside product folder and now if we go to "/product/1" , "/product/3" , "/product/2323230" and anything after "/product/*" then our [productId].js file will be loaded where the dynamic segment "1" , "3" , "2323230" will be stored in productId variable and in order to grab it in component we will use hook called useRouter hook provided by nextJs.

Here let say if we have seprate page for sweater in "/product/sweater" but as we have already defined dynamic route "/product/productId" so out of 2 the more specific one the "/product/sweater" will have higher priority over the dynamic  route , Similar behaviour as react router in react. In nextjs the router first match the more specific filename before going to dynamic one.

(d). Now let say in out /product/productId route i want to see review as well so for that i will go to /product/productId/review/reviewId and here we will create nested dynamic route in which one dynamic route is productId and other is reviewId. Since nested is required so have to create nested folder as well but as there is dynamic route so now folder name must be "[productId]" which dynamic segment

(e). Now let say we are creating a docs site where we have 20 feature and each feature contain 20 concept so if we try to create page then total it will be 20 * 20 => 400 pages in our project which off course can be reduce down to 1 by using dynamic route of feature [featureId] and concept [conceptId] but we also have catch all route feature which allows you to match any number of path segments after a specific path segment and correspond it to a single file. The syntax for a catch-all route involves using three dots [...name].js followed by the name of the parameter to capture all subsequent segments. In nextJS we also have optional catch all routes which will execute when we have not handled the particular route case in our project nextJS provide us with default 404 page which offcourse we can override with [[...name]].js 

(f). Normal Catch-All Route ::

      Syntax: Defined with three dots in square brackets, e.g., [...slug].js.
      Behavior: Captures one or more segments. It requires at least one segment to be matched.

        Example:
            Route: /parent/[...slug].js
            Matches: /parent/abc, /parent/abc/def, etc.
            Does not match: /parent (would result in a 404).

    Optional Catch-All Route

       Syntax: Defined with double square brackets, e.g., [[...slug]].js.
       Behavior: Captures zero or more segments. It can match if no additional segments are provided.

         Example:
            Route: /parent/[[...slug]].js
            Matches: /parent (no segments), /parent/abc, /parent/abc/def, etc.
            The slug variable will be undefined when the path is /parent.

(g). So far we have navigated to different pages by putting url in address bar but most of the time user go to different pages by clicking on some button or programatically and for this we use Link component of nextJS router which work similar to the one in react-router but will use href prop instead of to and it is used for client-side routing. Now first we will navigate from home page to blob page by link click. In order to do programatic routing we will use useRouter hook .push() to change route programatically and .replace() to also change route programatically but replace the current url from history stack

(h). In nextJS if we try to hit the url which we have not created in pages folder then nextJS will show the custom 404 page and if we want to create our own custom 404 page then we just need to create 404.js file in pages folder 